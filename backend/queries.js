// instructions to setting up test database below
// https://parsity-fulltime-3.atlassian.net/jira/software/projects/PFTC3AP/boards/1?selectedIssue=PFTC3AP-9
const { Pool, Client } = require('pg');
const parser = require('pg-connection-string').parse;
const bcrypt = require('bcrypt');

const client = new Client(parser(process.env.DATABASE_URL));

const pool = new Pool(parser(process.env.DATABASE_URL));

const strings = {};

// ------------- QUERIES GO HERE---------------------

strings.allUsers = () => `SELECT * FROM "slacker_users"`;
strings.oneUser = (email) => ({
  text: `SELECT * FROM "slacker_users" WHERE email = $1`,
  values: [email],
});
strings.userById = (id) => ({
  text: `SELECT * FROM "slacker_users" WHERE userid = $1`,
  values: [id],
});

// ---------------------------------------------------

const getAllChannels = (req, res, next) => {
  const query = {
    text: `
    SELECT *
    FROM channel;
  `,
  };

  client.query(query, (error, results) => {
    if (error) {
      throw error;
    }
    res.send(results.rows);
  });
};

const getChannelUsers = (req, res, next) => {
  const { channelId } = req.params;

  const query = {
    text: `
    SELECT
      slacker_users.userid,
      slacker_users.name,
      user_channel.channelid
    FROM
      slacker_users
    INNER JOIN user_channel ON user_channel.userid = slacker_users.userid
	  WHERE user_channel.channelid = $1
    `,
    values: [channelId],
  };

  client.query(query, (error, results) => {
    if (error) {
      throw error;
    }
    res.send(results.rows);
  });
};

const getChannelPosts = (req, res, next) => {
  const { channelId } = req.params;

  const query = {
    text: `
    SELECT
      message.text,
      message.userid,
	  message.createddate,
      slacker_users.name,
      channel.channelid
    FROM
      message
	  INNER JOIN slacker_users ON slacker_users.userid = message.userid
    INNER JOIN channel ON channel.channelid = message.channelid
    WHERE message.channelid = $1
    `,
    values: [channelId],
  };

  client.query(query, (error, results) => {
    if (error) {
      throw error;
    }
    res.send(results.rows);
  });
};

const createChannelMessage = (req, res, next) => {
  const { channelId } = req.params;
  const { text, userid, createddate } = req.body;

  const query = {
    text: `
    INSERT INTO message (userid, channelid, dmid, text, createddate)
      VALUES ($1, $2, null, $3, $4);
    `,
    values: [userid, channelId, text, createddate],
  };

  client.query(query, (error, results) => {
    if (error) {
      throw error;
    }
    res.send('cool!');
  });
};

const createChannelUser = (req, res, next) => {
  const { channelId } = req.params;
  const { userid } = req.body;

  const query = {
    text: `
    INSERT INTO user_channel (userid, channelid)
      VALUES ($1, $2);
    `,
    values: [userid, channelId],
  };

  client.query(query, (error, results) => {
    if (error) {
      throw error;
    }
    res.send('BOOM');
  });
};

const deleteChannelMessage = (req, res, next) => {
  const { messageId } = req.params;

  const query = {
    text: `
    DELETE FROM message
    WHERE messageid = $1
    `,
    values: [messageId],
  };

  client.query(query, (error, results) => {
    if (error) {
      throw error;
    }
    res.send('sweet!!');
  });
};

const deleteChannelUser = (req, res, next) => {
  const { channelId } = req.params;
  const { userid } = req.body;

  const query = {
    text: `
    DELETE FROM user_channel
    WHERE userid = $1 AND channelid = $2
    `,
    values: [userid, channelId],
  };

  client.query(query, (error, results) => {
    if (error) {
      throw error;
    }
    res.send('sweet!!');
  });
};

async function setupDevDatabase(request, response) {
  const passwords = ['awesome', 'cool', 'epic', 'fantabulous', 'mindblowing'];

  const hashes = passwords.map((p) => bcrypt.hashSync(p, 10));

  const createUserTable = `
    CREATE TABLE "slacker_users" (
        user_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        email varchar,
        name varchar,
        password varchar
    );`;

  const populateUserTable = {
    text: `
    INSERT INTO "slacker_users" (name, email, password)
      VALUES ('Dio', 'dio@example.com', $1), ('Susan', 'susan@example.com', $2), ('Simon', 'simon@example.com', $3), ('Jerry', 'jerry@example.com', $4), ('Wendy', 'wendy@example.com', $5
    );`,
    values: hashes,
  };

  const createConversationTable = `
    CREATE TABLE conversation (
        conversation_id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        name varchar,
        description varchar,
        type varchar,
        private boolean,
        count int,
        createddate timestamp
    );`;

  const populateConversationTable = `
    INSERT INTO "conversation" (name, description, type, private, count, createddate)
      VALUES ('slackers', 'channel for cohort 3 fulltime agile project', ch, false, null, '2022-03-29 10:23:54'), ('slackers-backend', 'channel for backend team', ch, false, null, '2022-03-29 10:23:54'),
      ('slackers-frontend', 'channel for frontend team', ch, false, null, '2022-03-29 10:23:54'
    );`;

  const createUserConversationJunction = `
    CREATE TABLE user_conversation (
        user_id integer REFERENCES "slacker_users"(user_id),
        conversation_id integer REFERENCES "conversation"(conversation_id),
        CONSTRAINT user_channel_pkey PRIMARY KEY (user_id, conversation_id)
    );`;

  const populateUserConversationTable = `
    INSERT INTO "user_conversation" (user_id, channel_id)
      VALUES (1, 5), (2, 6), (3, 2), (2, 3), (4, 1), (2, 2), (2, 4), (3, 6);
    `;

  const createMessageTable = `
    CREATE TABLE message (
        message_id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        user_id integer REFERENCES "slacker_users"(user_id),
        conversation_id integer REFERENCES "channel"(conversation_id),
        text varchar,
        createdDate timestamp
    );`;

  const populateMessageTable = `
    INSERT INTO message (user_id, conversation_id, text, createdDate)
      VALUES (1, 1, 'hey how is everyone?', '2022-03-29 10:23:54'), 
      (4, 1,  'hi im fine', '2022-03-29 10:24:01'),
      (2, 3, 'channel 3 for the win', '2022-03-25 07:30:00'),
      (2, 2, 'how are you liking channel 2?', '2022-03-30 02:45:15'), 
      (3, 2, 'it is okay', '2022-03-30 02:47:15'),
      (1, 4, 1, 'hey user 2', '2022-03-30 11:15:15'),
      (2, 4, 1, 'hey user 1', '2022-03-30 11:20:15'),
      (1, 5, 2, 'hi how are you doing', '2022-03-30 11:16:15'),
      (3, 6, 3, 'user 1 is so annoying haha', '2022-03-30 11:16:55'),
      (2, 6, 3, 'what are you talking about', '2022-03-30 11:18:15'),
      (2, 6, 3, 'oh i see now', '2022-03-30 11:21:17');
    `;

  await client.query(createUserTable).catch((err) => {
    console.log(err);
    console.log('----- slacker_users table could not be created :(');
  });
  console.log('+++++ slacker_users table exists or was successfully created');

  await client.query(populateUserTable).catch((err) => {
    console.log(err);
    console.log('----- slacker_users table could not be populated :(');
  });
  console.log('+++++ slacker_users table was successfully populated');

  await client.query(createConversationTable).catch((err) => {
    console.log(err);
    console.log('channel table could not be created :(');
  });
  console.log('+++++ channel table exists or was successfully created');

  await client.query(populateConversationTable).catch((err) => {
    console.log(err);
    console.log('----- channel table could not be populated :(');
  });
  console.log('+++++ channel table was successfully populated');

  await client.query(createUserConversationJunction).catch((err) => {
    console.log(err);
    console.log('user_channel table could not be created :(');
  });
  console.log('+++++ user_channel table exists or was successfully created');

  await client.query(populateUserConversationTable).catch((err) => {
    console.log(err);
    console.log('----- user_channel table could not be populated :(');
  });
  console.log('+++++ user_channel table was successfully populated');

  await client.query(createMessageTable).catch((err) => {
    console.log(err);
    console.log('message table could not be created :(');
  });
  console.log('+++++ message table exists or was successfully created');

  await client.query(populateMessageTable).catch((err) => {
    console.log(err);
    console.log('----- message table could not be populated :(');
  });
  console.log('+++++ message table was successfully populated');

  response.send();
}

module.exports = {
  strings,
  pool,
  client,
  setupDevDatabase,
  getAllChannels,
  getChannelPosts,
  getChannelUsers,
  createChannelMessage,
  deleteChannelMessage,
  createChannelUser,
  deleteChannelUser,
};
