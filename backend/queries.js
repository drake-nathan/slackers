// instructions to setting up test database below
// https://parsity-fulltime-3.atlassian.net/jira/software/projects/PFTC3AP/boards/1?selectedIssue=PFTC3AP-9
const { Pool, Client } = require('pg');

const client = new Client({
  database: 'test',
});

const pool = new Pool({
  database: 'test',
});

const getDMs = (request, response) => {
  const query = `
    SELECT * FROM "dm";`;

  pool.query(query, (error, results) => {
    if (error) {
      throw error;
    }
    response.send(results.rows);
  });
};

async function setupDevDatabase(request, response) {
  client.connect();

  const createUserTable = `
    CREATE TABLE "slacker_users" (
        userID integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        email varchar,
        name varchar
    );`;

  const populateUserTable = `
    INSERT INTO "slacker_users" (name, email)
      VALUES ('Dio', 'dio@example.com'), ('Susan', 'susan@example.com'), ('Simon', 'simon@example.com'), ('Jerry', 'jerry@example.com'), ('Wendy', 'wendy@example.com'
    );`;

  const createChannelTable = `
    CREATE TABLE channel (
        channelID int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        name varchar,
        description varchar
    );`;

  const populateChannelTable = `
    INSERT INTO "channel" (name, description)
      VALUES ('slackers', 'channel for cohort 3 fulltime agile project'), ('slackers-backend', 'channel for backend team'),
      ('slackers-frontend', 'channel for frontend team')
    );`;

  const createUserChannelJunction = `
    CREATE TABLE user_channel (
        "userID" integer REFERENCES "slacker_users"(userID),
        "channelID" integer REFERENCES "channel"(channelID),
        CONSTRAINT user_channel_pkey PRIMARY KEY ("userID", "channelID")
    );`;

  const createDMTable = `
    CREATE TABLE dm (
      dmID int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
      "user1" integer REFERENCES "slacker_users"(userID),
      "user2" integer REFERENCES "slacker_users"(userID),
      UNIQUE ("user1", "user2")
    );`;

  const createMessageTable = `
    CREATE TABLE message (
        messageID int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        "userID" integer REFERENCES "slacker_users"(userID),
        "channelID" integer REFERENCES "channel"(channelID),
        "dmID" integer REFERENCES "dm"(dmID),
        text varchar,
        createdDate timestamp
    );`;

  const populateMessageTable = `
    INSERT INTO message (userID, text, createdDate)
      VALUES (1, 'hey how are you?', '2022-03-29 10:23:54'), (2, 'hi im fine', '2022-03-29 10:24:01'), 
      (1, 'oh good', '2022-03-29 10:25:00') 
    );`;

  await client.query(createUserTable).catch((err) => {
    console.log(err);
    console.log('----- slacker_users table could not be created :(');
  });
  console.log('+++++ slacker_users table exists or was successfully created');

  await client.query(populateUserTable).catch((err) => {
    console.log(err);
    console.log('----- slacker_users table could not be populated :(');
  });
  console.log('+++++ slacker_users table was successfully populated');

  await client.query(createChannelTable).catch((err) => {
    console.log(err);
    console.log('channel table could not be created :(');
  });
  console.log('+++++ channel table exists or was successfully created');

  await client.query(populateChannelTable).catch((err) => {
    console.log(err);
    console.log('----- channel table could not be populated :(');
  });
  console.log('+++++ channel table was successfully populated');

  await client.query(createUserChannelJunction).catch((err) => {
    console.log(err);
    console.log('user_channel table could not be created :(');
  });
  console.log('+++++ user_channel table exists or was successfully created');

  await client.query(createDMTable).catch((err) => {
    console.log(err);
    console.log('dm table could not be created :(');
  });
  console.log('+++++ dm table exists or was successfully created');

  await client.query(createMessageTable).catch((err) => {
    console.log(err);
    console.log('message table could not be created :(');
  });
  console.log('+++++ message table exists or was successfully created');

  await client.query(populateMessageTable).catch((err) => {
    console.log(err);
    console.log('----- message table could not be populated :(');
  });
  console.log('+++++ message table was successfully populated');

  client.end();
  response.send();
}

module.exports = { getDMs, setupDevDatabase };
